# -*- coding: utf-8 -*-
"""ecommerce_proj.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14JvF9qfPnuwQDY6XOolSfS6dYIYTLVFI
"""

import sqlite3
import pandas as pd
import os

DB_FILE = "ecommerce_data.db"
DATA_DIR = "data"

def create_database():

    if os.path.exists(DB_FILE):
        os.remove(DB_FILE)
        print(f"Removed old database file: {DB_FILE}")

    conn = sqlite3.connect(DB_FILE)
    print(f"Created new database: {DB_FILE}")

    try:
        ad_sales_df = pd.read_csv("plasm.csv")
        ad_sales_df.to_sql("ad_sales", conn, if_exists="replace", index=False)
        print("Created and populated 'ad_sales' table.")

        total_sales_df = pd.read_csv("pltsm.csv")
        total_sales_df.to_sql("total_sales", conn, if_exists="replace", index=False)
        print("Created and populated 'total_sales' table.")


        eligibility_df = pd.read_csv("plet.csv")
        eligibility_df.to_sql("eligibility", conn, if_exists="replace", index=False)
        print("Created and populated 'eligibility' table.")

    except Exception as e:
        print(f"An error occurred: {e}")
    finally:
        conn.close()
        print("Database setup complete. Connection closed.")

if __name__ == "__main__":
    create_database()

import os
import sqlite3
import google.generativeai as genai
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel

DB_FILE = "ecommerce_data.db"

API_KEY = os.getenv("GOOGLE_API_KEY")

app = FastAPI()
genai.configure(api_key=API_KEY)
model = genai.GenerativeModel('gemini-pro')

def get_db_schema():

    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
    tables = cursor.fetchall()
    schema = ""
    for table in tables:
        table_name = table[0]
        cursor.execute(f"PRAGMA table_info({table_name});")
        columns = cursor.fetchall()
        schema += f"Table '{table_name}':\n"
        for col in columns:
            schema += f"  - {col[1]} ({col[2]})\n"
    conn.close()
    return schema

def execute_sql(query: str):

    try:
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        cursor.execute(query)
        results = cursor.fetchall()
        conn.close()
        return results
    except sqlite3.OperationalError as e:
        return f"SQL Error: {e}"

def get_sql_from_llm(question: str, schema: str):
    """Generates an SQL query from a natural language question."""
    prompt = f"""
    You are an expert SQL analyst. Based on the database schema below, write a single, syntactically correct SQL query to answer the user's question.
    Only output the SQL query and nothing else.

    **Database Schema:**
    {schema}

    **Question:**
    "{question}"

    **SQL Query:**
    """
    response = model.generate_content(prompt)
    sql_query = response.text.strip().replace("```sql", "").replace("```", "").strip()
    return sql_query

def get_summary_from_llm(question: str, data: str):
    """Generates a human-readable summary from the query result."""
    prompt = f"""
    You are a helpful AI assistant. A user asked the following question:
    "{question}"

    The answer from the database is:
    "{data}"

    Provide a concise, human-readable answer based on this data.
    """
    response = model.generate_content(prompt)
    return response.text.strip()

class QuestionRequest(BaseModel):
    question: str

@app.get("/")
def read_root():
    return {"message": "E-commerce AI Agent is running. Send POST requests to /ask"}

@app.post("/ask")
def ask_agent(request: QuestionRequest):
    """
    Receives a question, processes it, and returns a human-readable answer.
    """
    print(f"Received question: {request.question}")


    schema = get_db_schema()

    sql_query = get_sql_from_llm(request.question, schema)
    print(f"Generated SQL: {sql_query}")

    sql_result = execute_sql(sql_query)
    print(f"SQL Result: {sql_result}")

    if "Error" in str(sql_result):
        raise HTTPException(status_code=400, detail=f"Failed to execute query: {sql_result}")

    final_answer = get_summary_from_llm(request.question, str(sql_result))
    print(f"Final Answer: {final_answer}")

    return {"question": request.question, "sql_query": sql_query, "answer": final_answer}

import matplotlib.pyplot as plt
import pandas as pd


def create_visual(data, question):
    """Creates and displays a bar chart if the data is suitable."""
    try:
        df = pd.DataFrame(data)

        if len(df.columns) == 2:
            plt.figure(figsize=(10, 6))
            plt.bar(df.iloc[:, 0], df.iloc[:, 1], color='skyblue')
            plt.xlabel(df.columns[0])
            plt.ylabel(df.columns[1])
            plt.title(question)
            plt.xticks(rotation=45, ha='right')
            plt.tight_layout()
            plt.show()
        else:
            print("--> Data not suitable for a simple chart.")

    except Exception as e:
        print(f"--> Could not create visual: {e}")


def run_ai_agent(question: str):
    """
    Runs the agent and attempts to create a visualization for the result.
    """
    print(f"Running Agent for question: '{question}'")
    schema = get_db_schema()
    sql_query = get_sql_from_llm(question, schema)
    print(f"Generated SQL: {sql_query}")

    sql_result = execute_sql(sql_query)
    print(f"SQL Result: {sql_result}")

    if not sql_result or "Error" in str(sql_result):
        print(f" Error or empty result: {sql_result}")
        return

    create_visual(sql_result, question)

    final_answer = get_summary_from_llm(question, str(sql_result))
    print(f"\nSummary: {final_answer}\n" + "-"*50)

import google.generativeai as genai

API_KEY = "AIzaSyDTnVpJhAdeZXLdJhRZQz9VneF6KPksOTQ"

genai.configure(api_key=API_KEY)

print("âœ… Gemini API key has been successfully configured.")

model = genai.GenerativeModel('gemini-1.5-flash-latest')

run_ai_agent(question="What is my total sales?")

run_ai_agent(question="Calculate the RoAS (Return on Ad Spend), which is Total Revenue divided by total Ad Spend")

run_ai_agent(question="Chart the total revenue for each product ID")

run_ai_agent(question="Calculate the clicks")

# Step 1: Install pyngrok and streamlit (if not already)
!pip install pyngrok streamlit --quiet

# Step 2: Set up imports and env manually (no userdata)
from pyngrok import ngrok
import os

# Kill any existing tunnels
ngrok.kill()

# Step 3: Manually ask user to enter Gemini API Key (or hardcode it here)
API_KEY = input("Enter your Gemini API Key: ")  # OR paste your key here as a string
os.environ["GOOGLE_API_KEY"] = API_KEY

# Step 4: Run Streamlit app (assumes 'app.py' exists in current directory)
!nohup streamlit run app.py &

# Step 5: Create and display public URL via ngrok
public_url = ngrok.connect(addr="8501", proto="http")
print(f"\nâœ… Your Streamlit app is live at:\nðŸ‘‰ {public_url}")

from pyngrok import ngrok, conf

# Set your authtoken here
ngrok.set_auth_token("30Gj4xCDdQS0w2sQWVS9bLsmRqo_89Gt3b2f2UQ5nrtvCHCgt")

